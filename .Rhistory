install.packages("KernSmooth")
library(KernSmooth)
add2(9,5)
add2 <- function(x,y) {
x+y
}
add2(9,5)
above <- function (x,n) {
use <- x > n
x[use]
}
x< 1:20
x<- 1:20
above(10,12)
above(x,12)
above <- function (x,n = 10) {
use <- x > n
x[use]
}
above(x)
columnmean <- (y) {
nc <- ncols(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- means(y[,i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- means(y[,i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
above <- function (x,n = 10) {
use <- x > n
x[use]
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean <- (y) {
nc <- ncol(y)
means <- numeric(nc)
means
}
columnmean <- (y) {
nc <- ncol(y)
means
}
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[, i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
columnmean(airquality)
make.power <- function(n) {
pow <- function(x){
x^n
}
pow
}
make.power(2)
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(9)
ls(environment(cube))
et(n, environment(cube))
get(n, environment(cube))
get("n", environment(cube))
y <- 10
f <- function(x) {}
f <- function(x) {}
f <- function(x) {
y <- 2
y^2 + g(x)
}
g<-function(x){
x*y
}
f(3)
datestring <- Sys.time()
datestring
formatdate <- strptime(datestring, "%Y%B%d")
formatdata(datestring)
formatdate(datestring)
formatdate
formatdate <- strptime(datestring, "%Y%B%d")
formatdate
formatdate <- strptime(datestring, "%Y %B %d")
formatdate
formatdate <- strptime(datestring, "%Y %B %d %H:%M")
formatdate
formatdate <- strptime(datestring, "%B %d, %Y %H:%M")
formatdate
datestring <- Sys.time()
datestring
strptime(datestring, "%B %d, %Y %H:%M")
formatdate <- strptime(datestring, "%B %d, %Y %H:%M")
class(formatdate)
datestring <- "March 25, 2016 1:06""
""
datestring <- "March 25, 2016 1:06"
formatdate <- strptime(datestring, "%Y%B%d")
formatdate
datestring <- c("March 25, 2016 1:06")
formatdate <- strptime(datestring, "%Y%B%d")
formatdate
datestring <- c("March 25, 2016")
formatdate <- strptime(datestring, "%Y%B%d")
formatdate
formatdate <- strptime(datestring, "%Y %B% d")
formatdate
formatdate <- strptime(datestring, "%B %d, %Y")
formatdate
formatdate <- strptime(datestring, "%Y %d %B")
formatdate
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE)
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
6 <= 7
10 <= 10
5 != 7
NOT (5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6,!FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11.5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args()
args(remainder)
play()
median(c(7,40,9))
floor(11.1)
floor(c(11.1))
vector(1,2,3)
vector(...)
vector()
vector(3)
vector(c(1,2,3))
vector(mode="numeric", c(1,2,3))
vector(c(1,2,3))
list(c(1,2,3))
vector(c(1,2,3), mode="any")
vector(c(1,2,3), mode="any", length="any")
vector(mode="", c(1,2,3), length=length(c(1,2,3)))
vector(mode="numeric", c(1,2,3), length=length(c(1,2,3)))
vector(2)
vector(length=2, mode="numeric")
vector(length=2, mode="numeric")
nxt()
submit()
fplay()
play()
evaluate <- function(func, dat){
datlen <- length(dat)
func(vector(mode = "numeric", length = datlen))
}
evaluate(sum, c(2,4,6))
evaluate(sum(), c(2,4,6))
evaluate(sum, c(2,4,6))
evaluate<- function(func, dat){
+ datlen <- length(dat)
}
evaluate<- function(func, dat){
datlen <- length(dat)
func
# Remember: the last expression eva
evaluate<- function(func, dat){
datlen <- length(dat)
func(dat, mode = "numeric", length = datlen)
}
evaluate(sum, c(2,4,6))
nxt()
nxt()
submit
submit()
submit()
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("too", "much", "to", "do", "today")
submit(P)
submit()
submit()
mad_libs(place = "Arlington", noun="cat", adjective = "funny")
submit()
("I" %p% "love") %p% "R"
("I" %p% "love") %p% "R!"
('I' %p% 'love') %p% 'R!'
info()
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
months(d1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
q()
pwd
ls()
setwd("C:/linCoursera/exploratoryDataAnalysis/ExData_Plotting1")
load("C:/linCoursera/exploratoryDataAnalysis/.RData")
demo()
ls()
plot(plotdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xaxt="n")
axis(1, at=c(0, 1440, 2880), labels=c("Thu", "Fri", "Sat"))
axis(1, at=ticks, labels=c("Thu", "Fri", "Sat"))
xlab=""
xlab=''
xlab=NULL
xlab="My label"
par(xlab=NULL)
plot(plotdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xaxt="n", xlab=NULL)
plot(plotdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xaxt="n", xlab='')
plot(plotdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xaxt="n", xlab='')
thursday <- 0
friday <- dim(subset(plotdata, Date == as.Date("2007-02-02")))[1]
saturday <- dim(plotdata)[1]
ticks <- c(thursday, friday, saturday)
axis(1, at=ticks, labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file="plot2.png")
dev.off()
getwd()
plot(plotdata$Global_active_power, type="l", ylab="Global Active Power (kilowatts)", xaxt="n", xlab='')
axis(1, at=ticks, labels=c("Thu", "Fri", "Sat"))
dev.copy(png, file="plot2.png")
dev.off()
head(plotdata)
boxplot(plotdata$Sub_metering_1, type="l", ylab="Energy Sub metering", xaxt="n", xlab='')
boxplot(plotdata$Sub_metering_2, type="l", col="red", ylab="Energy Sub metering", xaxt="n", xlab='')
boxplot(plotdata$Sub_metering_1, type="l", ylab="Energy Sub metering", xaxt="n", xlab='')
boxplot(plotdata$Sub_metering_1, type="l", ylab="Energy Sub metering", xaxt="n", xlab='')
boxplot(Sub_metering_1~Date, plotdata, xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(Sub_metering_2~Date, plotdata, col.axis="red", xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(plotdata$Sub_metering_1, type="l", ylab="Energy Sub metering", xaxt="n", xlab='')
boxplot(Sub_metering_2~Date, plotdata, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
dim(plotdata)
factoredDatePlotData <- transform(plotdata, Day=factor(Date))
head(factoredDatePlotData)
head(plotdata)
boxplot(Sub_metering_2~Date, plotdata, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
summary(plotdata$Sub_metering_1)
factored_sub1 <- transform(plotdata, Sub_metering_1=factor(Sub_metering_1))
head(factored_sub1)
boxplot(factored_sub1~Date, plotdata, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(factored_sub1$Sub_metering_1~Date, plotdata, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
rm factored_sub1
del factored_sub1
factored_sub1 <- transform(plotdata, Sub_metering_1=factor(Sub_metering_1))
factoredDatePlotData <- transform(plotdata, Date=factor(Date))
boxplot(Sub_metering_1~Date, plotdata, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(Sub_metering_1~Date, factoredDatePlotData, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(Sub_metering_1~Date, factoredDatePlotData, col="red", xaxt="n", xlab='', type="l", ylab="Energy Sub metering")
boxplot(Sub_metering_1~Date, factoredDatePlotData, col="red", xaxt="n", xlab='', ylab="Energy Sub metering")
boxplot(Sub_metering_2~Date, factoredDatePlotData, col="blue", xaxt="n", xlab='', ylab="Energy Sub metering")
?boxplot
plot(plotdata$Sub_metering_1, plotdata$Date)
plot(plotdata$Sub_metering_1, plotdata$Date, type="l")
boxplot(plotdata$Sub_metering_1, plotdata$Date, type="l")
boxplot(plotdata$Sub_metering_1~plotdata$Date, type="l")
boxplot(plotdata$Sub_metering_1~factoredDatePlotdata$Date, type="l")
boxplot(plotdata$Sub_metering_1~factoredDatePlotData$Date, type="l")
plot(plotdata$Sub_metering_1, plotdata$Date, type="l", horizontal)
plot(plotdata$Sub_metering_1, plotdata$Date, type="l", horizontal=T)
boxplot(Sub_metering_1~Date, data=plotdata, type="l")
hist(plotsdata$Sub_metering_1 ~ plotdata$Date)
hist(plotsdata$Sub_metering_1 ~ factor(plotdata$Date))
hist(plotsdata$Sub_metering_1 ~ factor(plotdata$Date))
barplot(plotsdata$Sub_metering_1 ~ plotdata$Date)
